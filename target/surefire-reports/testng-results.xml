<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="10" ignored="0" total="62" passed="52">
  <reporter-output>
  </reporter-output>
  <suite name="Registration and login tests" duration-ms="282642" started-at="2020-09-23T15:25:14 NOVT" finished-at="2020-09-23T15:29:57 NOVT">
    <groups>
    </groups>
    <test name="Registration and Login tests" duration-ms="282642" started-at="2020-09-23T15:25:14 NOVT" finished-at="2020-09-23T15:29:57 NOVT">
      <class name="ru.mail.regtest2020.tests.RegistrationTests">
        <test-method status="PASS" signature="init()[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="init" is-config="true" duration-ms="3792" started-at="2020-09-23T15:26:12 NOVT" finished-at="2020-09-23T15:26:16 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="initPage()[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="initPage" is-config="true" duration-ms="25733" started-at="2020-09-23T15:26:16 NOVT" finished-at="2020-09-23T15:26:42 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPage -->
        <test-method status="PASS" signature="checkRequiredFieldsTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="checkRequiredFieldsTest" duration-ms="1927" started-at="2020-09-23T15:26:42 NOVT" data-provider="requiredFieldsInRegistrationPage" finished-at="2020-09-23T15:26:44 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[firstName]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkRequiredFieldsTest -->
        <test-method status="PASS" signature="checkRequiredFieldsTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="checkRequiredFieldsTest" duration-ms="939" started-at="2020-09-23T15:26:44 NOVT" data-provider="requiredFieldsInRegistrationPage" finished-at="2020-09-23T15:26:45 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[lastName]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkRequiredFieldsTest -->
        <test-method status="PASS" signature="checkRequiredFieldsTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="checkRequiredFieldsTest" duration-ms="734" started-at="2020-09-23T15:26:45 NOVT" data-provider="requiredFieldsInRegistrationPage" finished-at="2020-09-23T15:26:45 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[email]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkRequiredFieldsTest -->
        <test-method status="PASS" signature="checkRequiredFieldsTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="checkRequiredFieldsTest" duration-ms="1117" started-at="2020-09-23T15:26:45 NOVT" data-provider="requiredFieldsInRegistrationPage" finished-at="2020-09-23T15:26:46 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[password]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkRequiredFieldsTest -->
        <test-method status="PASS" signature="checkRequiredFieldsTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="checkRequiredFieldsTest" duration-ms="866" started-at="2020-09-23T15:26:46 NOVT" data-provider="requiredFieldsInRegistrationPage" finished-at="2020-09-23T15:26:47 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[confirmPassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- checkRequiredFieldsTest -->
        <test-method status="PASS" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="6165" started-at="2020-09-23T15:26:47 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:26:53 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[bulkin_ivan@mail12.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="PASS" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="5826" started-at="2020-09-23T15:26:53 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:26:59 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[bulkin25@mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="PASS" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="5937" started-at="2020-09-23T15:26:59 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:27:05 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[bulkin.ivan@mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="PASS" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="5884" started-at="2020-09-23T15:27:05 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:27:11 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[bulkin-ivan@mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="FAIL" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="767" started-at="2020-09-23T15:27:11 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:27:12 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ivan@mail_mail.ru ]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at org.testng.Assert.assertFalse(Assert.java:77)
at ru.mail.regtest2020.tests.RegistrationTests.fillEmailCorrectDataTest(RegistrationTests.java:150)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="PASS" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="5977" started-at="2020-09-23T15:27:12 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:27:18 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ivan@mail-mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="PASS" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="5843" started-at="2020-09-23T15:27:18 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:27:24 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[IVAN@mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="FAIL" signature="fillEmailCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailCorrectDataTest" duration-ms="677" started-at="2020-09-23T15:27:24 NOVT" data-provider="correctEmail" finished-at="2020-09-23T15:27:24 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[IVAN@почта.рф]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [false] but found [true]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [false] but found [true]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertFalse(Assert.java:67)
at org.testng.Assert.assertFalse(Assert.java:77)
at ru.mail.regtest2020.tests.RegistrationTests.fillEmailCorrectDataTest(RegistrationTests.java:150)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailCorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="955" started-at="2020-09-23T15:27:24 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:25 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[bulkin ivan@mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="951" started-at="2020-09-23T15:27:25 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:26 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[bulkin@mail]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="885" started-at="2020-09-23T15:27:26 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:27 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ivan@.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="678" started-at="2020-09-23T15:27:27 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:28 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="1263" started-at="2020-09-23T15:27:28 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:29 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ivan#mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="888" started-at="2020-09-23T15:27:29 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:30 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Iivan@ma%il.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="961" started-at="2020-09-23T15:27:30 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:31 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ivan@mail mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillEmailIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillEmailIncorrectDataTest" duration-ms="1797" started-at="2020-09-23T15:27:31 NOVT" data-provider="incorrectEmail" finished-at="2020-09-23T15:27:33 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[@mail.ru]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillEmailIncorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameCorrectDataTest" duration-ms="5850" started-at="2020-09-23T15:27:33 NOVT" data-provider="correctFirstName" finished-at="2020-09-23T15:27:39 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[И]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameCorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameCorrectDataTest" duration-ms="5780" started-at="2020-09-23T15:27:39 NOVT" data-provider="correctFirstName" finished-at="2020-09-23T15:27:45 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Иван-Иван]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameCorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameCorrectDataTest" duration-ms="5568" started-at="2020-09-23T15:27:45 NOVT" data-provider="correctFirstName" finished-at="2020-09-23T15:27:50 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Иван ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameCorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameCorrectDataTest" duration-ms="5581" started-at="2020-09-23T15:27:50 NOVT" data-provider="correctFirstName" finished-at="2020-09-23T15:27:56 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ivan]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameCorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameCorrectDataTest" duration-ms="5628" started-at="2020-09-23T15:27:56 NOVT" data-provider="correctFirstName" finished-at="2020-09-23T15:28:01 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[I]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameCorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameCorrectDataTest" duration-ms="5693" started-at="2020-09-23T15:28:01 NOVT" data-provider="correctFirstName" finished-at="2020-09-23T15:28:07 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Иван Иван]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameCorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="514" started-at="2020-09-23T15:28:07 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:08 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Иван2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="600" started-at="2020-09-23T15:28:08 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:08 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Иван+]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="720" started-at="2020-09-23T15:28:08 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:09 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Иван*!]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="539" started-at="2020-09-23T15:28:09 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:09 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="754" started-at="2020-09-23T15:28:09 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:10 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ivan12]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="595" started-at="2020-09-23T15:28:10 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:11 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Ivan%]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="5585" started-at="2020-09-23T15:28:11 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:16 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillFirstNameIncorrectDataTest(RegistrationTests.java:111)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillFirstNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillFirstNameIncorrectDataTest" duration-ms="5550" started-at="2020-09-23T15:28:16 NOVT" data-provider="incorrectFirstName" finished-at="2020-09-23T15:28:22 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[=]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillFirstNameIncorrectDataTest(RegistrationTests.java:111)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillFirstNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameCorrectDataTest" duration-ms="5494" started-at="2020-09-23T15:28:22 NOVT" data-provider="correctLastName" finished-at="2020-09-23T15:28:27 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Б]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameCorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameCorrectDataTest" duration-ms="5642" started-at="2020-09-23T15:28:27 NOVT" data-provider="correctLastName" finished-at="2020-09-23T15:28:33 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Бул-кин]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameCorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameCorrectDataTest" duration-ms="5583" started-at="2020-09-23T15:28:33 NOVT" data-provider="correctLastName" finished-at="2020-09-23T15:28:39 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ Булкин ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameCorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameCorrectDataTest" duration-ms="5524" started-at="2020-09-23T15:28:39 NOVT" data-provider="correctLastName" finished-at="2020-09-23T15:28:44 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Bulkin]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameCorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameCorrectDataTest" duration-ms="5569" started-at="2020-09-23T15:28:44 NOVT" data-provider="correctLastName" finished-at="2020-09-23T15:28:50 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[B]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameCorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameCorrectDataTest" duration-ms="5629" started-at="2020-09-23T15:28:50 NOVT" data-provider="correctLastName" finished-at="2020-09-23T15:28:55 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Булкин Плюшкин]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameCorrectDataTest -->
        <test-method status="FAIL" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="5673" started-at="2020-09-23T15:28:55 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:01 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Булкин2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillLastNameIncorrectDataTest(RegistrationTests.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="5561" started-at="2020-09-23T15:29:01 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:07 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Булкин+]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillLastNameIncorrectDataTest(RegistrationTests.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="5639" started-at="2020-09-23T15:29:07 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:12 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Булкин*!]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillLastNameIncorrectDataTest(RegistrationTests.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="521" started-at="2020-09-23T15:29:12 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:13 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="5809" started-at="2020-09-23T15:29:13 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:19 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Bulkin12]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillLastNameIncorrectDataTest(RegistrationTests.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="5552" started-at="2020-09-23T15:29:19 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:24 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[Bulkin%]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillLastNameIncorrectDataTest(RegistrationTests.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="FAIL" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="5500" started-at="2020-09-23T15:29:24 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:30 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertTrue(Assert.java:45)
at org.testng.Assert.assertTrue(Assert.java:55)
at ru.mail.regtest2020.tests.RegistrationTests.fillLastNameIncorrectDataTest(RegistrationTests.java:85)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:764)
at org.testng.TestRunner.run(TestRunner.java:585)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1218)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
at org.testng.TestNG.runSuites(TestNG.java:1069)
at org.testng.TestNG.run(TestNG.java:1037)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:284)
at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:119)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:428)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:162)
at org.apache.maven.surefire.booter.ForkedBooter.run(ForkedBooter.java:562)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:548)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillLastNameIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillLastNameIncorrectDataTest" duration-ms="540" started-at="2020-09-23T15:29:30 NOVT" data-provider="incorrectLastName" finished-at="2020-09-23T15:29:30 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[=]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillLastNameIncorrectDataTest -->
        <test-method status="PASS" signature="fillPasswordCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillPasswordCorrectDataTest" duration-ms="5636" started-at="2020-09-23T15:29:30 NOVT" data-provider="correctPassword" finished-at="2020-09-23T15:29:36 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillPasswordCorrectDataTest -->
        <test-method status="PASS" signature="fillPasswordCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillPasswordCorrectDataTest" duration-ms="5671" started-at="2020-09-23T15:29:36 NOVT" data-provider="correctPassword" finished-at="2020-09-23T15:29:42 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ 12345 ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillPasswordCorrectDataTest -->
        <test-method status="PASS" signature="fillPasswordCorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillPasswordCorrectDataTest" duration-ms="5658" started-at="2020-09-23T15:29:42 NOVT" data-provider="correctPassword" finished-at="2020-09-23T15:29:47 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[12345t]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillPasswordCorrectDataTest -->
        <test-method status="PASS" signature="fillPasswordIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillPasswordIncorrectDataTest" duration-ms="725" started-at="2020-09-23T15:29:47 NOVT" data-provider="incorrectPassword" finished-at="2020-09-23T15:29:48 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillPasswordIncorrectDataTest -->
        <test-method status="PASS" signature="fillPasswordIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillPasswordIncorrectDataTest" duration-ms="901" started-at="2020-09-23T15:29:48 NOVT" data-provider="incorrectPassword" finished-at="2020-09-23T15:29:49 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1234]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillPasswordIncorrectDataTest -->
        <test-method status="PASS" signature="fillPasswordIncorrectDataTest(java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="fillPasswordIncorrectDataTest" duration-ms="755" started-at="2020-09-23T15:29:49 NOVT" data-provider="incorrectPassword" finished-at="2020-09-23T15:29:50 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillPasswordIncorrectDataTest -->
        <test-method status="PASS" signature="passwordNotConfirmedTest()[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="passwordNotConfirmedTest" duration-ms="286" started-at="2020-09-23T15:29:50 NOVT" finished-at="2020-09-23T15:29:50 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- passwordNotConfirmedTest -->
        <test-method status="PASS" signature="registrationWithExistEmailTest()[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="registrationWithExistEmailTest" duration-ms="1063" started-at="2020-09-23T15:29:50 NOVT" finished-at="2020-09-23T15:29:51 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- registrationWithExistEmailTest -->
        <test-method status="PASS" signature="successfulRegistrationTest()[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="successfulRegistrationTest" duration-ms="4399" started-at="2020-09-23T15:29:51 NOVT" finished-at="2020-09-23T15:29:55 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successfulRegistrationTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:ru.mail.regtest2020.tests.RegistrationTests@5167268]" name="tearDown" is-config="true" duration-ms="1087" started-at="2020-09-23T15:29:55 NOVT" finished-at="2020-09-23T15:29:57 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- ru.mail.regtest2020.tests.RegistrationTests -->
      <class name="ru.mail.regtest2020.tests.LoginTests">
        <test-method status="PASS" signature="init()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="init" is-config="true" duration-ms="11784" started-at="2020-09-23T15:25:14 NOVT" finished-at="2020-09-23T15:25:26 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- init -->
        <test-method status="PASS" signature="initPage()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="initPage" is-config="true" duration-ms="20865" started-at="2020-09-23T15:25:26 NOVT" finished-at="2020-09-23T15:25:47 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initPage -->
        <test-method status="PASS" signature="refreshPage()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="refreshPage" is-config="true" duration-ms="895" started-at="2020-09-23T15:25:47 NOVT" finished-at="2020-09-23T15:25:48 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPage -->
        <test-method status="PASS" signature="loginWithWrongPasswordOrLoginTest(java.lang.String, java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="loginWithWrongPasswordOrLoginTest" duration-ms="3446" started-at="2020-09-23T15:25:48 NOVT" data-provider="wrongPasswordLogin" finished-at="2020-09-23T15:25:52 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[regtest.2020@mail.ru]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[wrongpassword]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithWrongPasswordOrLoginTest -->
        <test-method status="PASS" signature="refreshPage()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="refreshPage" is-config="true" duration-ms="328" started-at="2020-09-23T15:25:52 NOVT" finished-at="2020-09-23T15:25:52 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPage -->
        <test-method status="PASS" signature="loginWithWrongPasswordOrLoginTest(java.lang.String, java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="loginWithWrongPasswordOrLoginTest" duration-ms="3506" started-at="2020-09-23T15:25:52 NOVT" data-provider="wrongPasswordLogin" finished-at="2020-09-23T15:25:55 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[wronglogin@df.er]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- loginWithWrongPasswordOrLoginTest -->
        <test-method status="PASS" signature="refreshPage()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="refreshPage" is-config="true" duration-ms="249" started-at="2020-09-23T15:25:55 NOVT" finished-at="2020-09-23T15:25:56 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPage -->
        <test-method status="PASS" signature="successfulLoginTest(java.lang.String, java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="successfulLoginTest" duration-ms="7383" started-at="2020-09-23T15:25:56 NOVT" data-provider="correctPasswordLogin" finished-at="2020-09-23T15:26:03 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[regtest.2020@mail.ru]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[12345]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successfulLoginTest -->
        <test-method status="PASS" signature="refreshPage()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="refreshPage" is-config="true" duration-ms="995" started-at="2020-09-23T15:26:03 NOVT" finished-at="2020-09-23T15:26:04 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- refreshPage -->
        <test-method status="PASS" signature="successfulLoginTest(java.lang.String, java.lang.String)[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="successfulLoginTest" duration-ms="7034" started-at="2020-09-23T15:26:04 NOVT" data-provider="correctPasswordLogin" finished-at="2020-09-23T15:26:11 NOVT">
          <params>
            <param index="0">
              <value>
                <![CDATA[ regtest.2020@mail.ru ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[ 12345 ]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- successfulLoginTest -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:ru.mail.regtest2020.tests.LoginTests@320e400]" name="tearDown" is-config="true" duration-ms="1031" started-at="2020-09-23T15:26:11 NOVT" finished-at="2020-09-23T15:26:12 NOVT">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- ru.mail.regtest2020.tests.LoginTests -->
    </test> <!-- Registration and Login tests -->
  </suite> <!-- Registration and login tests -->
</testng-results>
